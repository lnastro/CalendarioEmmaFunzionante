<?xml version="1.0" encoding="UTF-8"?>
<project name="TestTT" default="all" basedir=".">
  
    <property name="src.dir" location="."/>
    <property name="src.java.dir" location="${src.dir}/src"/>  <!--sorgenti .java-->
    <property name="src.test.dir" location="${src.dir}/test"/> <!--sorgetni test .java-->
 
    <property name="bin" location="bin"/>
    <property name="classes.dir" location="${bin}/classes"/> 
    <property name="test.classes.dir" location="${bin}/test/classes"/>

    <property name="report" location="junit-report"/>
    <property name = "full-compile" value = "true" />
 
 
 <property name="coverage.dir" value="${basedir}/reports/emma" />     <!-- directory which emma coverage reports will be written to -->
<property name="instr.dir" value="${basedir}/target/emmainstr" />    <!-- directory which emma instrumentation classes will be written to -->
<property name="emma.dir" value="${basedir}/lib/emma" />             <!-- directory that contains emma.jar and emma_ant.jar -->
<property name="emma.final.reports.des" value="${basedir}/EmmaFinalReport"/>

<!-- Set emma.lib to refer to the list of EMMA jar files -->
<path id="emma.lib" >
    <fileset dir="${emma.dir}">
        <include name="*.jar"/>
    </fileset>
</path>



<!-- Define which classes will be reported in the coverage reports (by default, we will include all classes and assume -->
<!-- that your project's output folder is target/classes -->
<path id="emma.coverage.classes" >
    <pathelement location="${classes.dir}" />
</path>

<!-- Load <emma> and <emmajava> custom tasks so that they can be used in ANT -->
<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

<!-- Enable Emma -->
<target name="emma" description="turns on EMMA's instrumentation/reporting" >

    <property name="emma.enabled" value="true" />

    <!-- EMMA instr class output directory (it is important to create this property only when EMMA is enabled) -->
    <mkdir dir="${instr.dir}" />
    
    <!-- this property, if overriden via -Demma.filter=<list of filter specs>
     on ANT's command line, will set the coverage filter; by default,
     all classes found in 'emma.coverage.classes' pathref will be instrumented:
    -->
    <property name="emma.filter" value="" />

</target>



 
 
 
 <target name = "clean" >
      <delete verbose = "${full-compile}">
         <fileset dir = "${bin}" includes = "**/*.class" />
      </delete>
   </target>
 
    <target name="compile.java">
        <mkdir dir="${classes.dir}"/>
        <javac destdir="${classes.dir}" includeantruntime="false" >
            <src path="${src.java.dir}"/>
        </javac>
    </target>
 
    <target name="compile.test" depends="compile.java">
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}" includeantruntime="false" >
            <src path="${src.test.dir}"/>
            <classpath>
                <pathelement location="${classes.dir}"/>
               <pathelement location="lib/junit-4.12.jar"/>
				<pathelement location="lib/hamcrest-core-1.3.jar"/>
            </classpath>
        </javac>
    </target>
 
    <!--<target name="compile" depends="compile.java,compile.test"/>-->
 
    <target name="test" depends="compile.test">
        <mkdir dir="${report}"/>
 
 <emma enabled="${emma.enabled}" >
    <instr instrpathref="emma.coverage.classes"
         destdir="${instr.dir}"
         metadatafile="${coverage.dir}/metadata.emma"
         merge="true"
    >
        <filter value="${emma.filter}" />
    </instr>
</emma>
 
 
 
        <junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="true">
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
			
            <batchtest todir="${report}">
                <fileset dir="${src.test.dir}">   
                </fileset>
            </batchtest>
			
            <classpath>
                <pathelement location="${instr.dir}"/> <!--<pathelement location="${classes.dir}"/>-->
                <pathelement location="${test.classes.dir}"/>
               <pathelement location="lib/junit-4.12.jar"/>
				<pathelement location="lib/hamcrest-core-1.3.jar"/>
				<path refid="emma.lib" />
            </classpath>
			<jvmarg value="-XX:-UseSplitVerifier"/> 
		  <jvmarg value="-noverify"/>
		<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
       <jvmarg value="-Demma.coverage.out.merge=false" />	
			
			
			
        </junit>
			
    </target>
 
    <target name="report" depends="test">
        <mkdir dir="${report}/html"/>
        <junitreport todir="${report}">
		
            <fileset dir="${report}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${report}/html"/>
        </junitreport>
    </target>
	
	
	
	
	    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <target name="emma-tests-report">
        <emma enabled="true" >
            <report sourcepath="src">    
                <fileset dir="${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="${emma.final.reports.des}/coverage.txt" depth="package" columns="class,method,block,line,name" />
                <xml outfile="${emma.final.reports.des}/coverage.xml" depth="method" />
                <html outfile="${emma.final.reports.des}/coverage.html" depth="method" columns="name,class,method,block,line" />
            </report>
        </emma>
    </target>
	
	
	
 <target name="all" depends="clean, emma,compile.java,compile.test, test,report,emma-tests-report"/>
</project>